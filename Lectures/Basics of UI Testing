Here’s the text content extracted from the PDF for AI processing:

---

**Basics of UI Testing**  
**PA1417 Lecture Unit 5**  

**Objectives**  
Today, you are going to learn about:  
**Part I: Theory**  
- How to apply use cases in test design  
- How to design tests for graphical user interfaces (GUI)  
- Testing the system through the GUI vs. testing the GUI  

**Part II: Hands-on**  
- Cypress framework  

---

**Test Pyramid**  
1. **Unit Tests**: Test if individual parts work.  
2. **Integration Tests**: Test if parts work together.  
3. **System Tests**: Test if the system can do something useful.  
4. **GUI Tests**: Test if the quality of the GUI meets standards.  

---

**GUI Testing Focus**  
Two aspects:  
1. **Functionality**: Does the feature work as a whole?  
2. **Quality**:  
   - **Usability**: Tasks performed safely, effectively, and efficiently.  
   - **Accessibility**: Usable by people with disabilities.  
   - **User Experience**: Overall experience of using the system.  

---

**Unit & Integration Testing of GUI Components**  
- Test individual GUI elements and their interactions.  
- Use **use cases** to design functional GUI tests.  

**Example Use Case: User Signup**  
1. Click “Sign Up” button.  
2. Enter username.  
3. Enter password.  
4. Click submit.  
5. If correct, show welcome message.  
   - **Extension**: If username exists, show error.  

---

**Testing Strategies**  
1. **Thorough Testing** (BVA, EP, branch coverage):  
   - Expensive and time-consuming.  
   - Hard to maintain with system changes.  
2. **Key Scenarios Only**:  
   - Focus on critical paths; edge cases may be missed.  
3. **Build on Lower-Level Tests** (Preferred):  
   - Use unit/integration tests for edge cases.  
   - GUI tests focus on GUI-specific workflows.  

---

**Test Pyramid Structure**  
| Backend Unit Tests | HTTP POST | Frontend GUI Tests |  
|--------------------|-----------|--------------------|  
| Backend Integration Tests | HTTP Response | |  
| **Lower layers handle edge cases; GUI tests validate workflows.** |  

---

**Testing GUI Quality**  
1. **User Tests**: Observe real users, identify pain points.  
2. **Heuristics**: Checklists (e.g., WCAG, platform guidelines).  
3. **Metrics**: Task time, error frequency, retention, etc.  

---

**Quiz: Selecting a Test Oracle**  
For each scenario, choose the appropriate oracle:  
1. Ease of website navigation.  
2. Frequency of accidental item deletion.  
3. Signup workflow correctness.  
4. Colorblind readability.  

---

**Accessibility**  
- Follow **WCAG** and platform-specific guidelines.  
- Tools: Automated accessibility checkers, browser tools.  
- Benefits: Improves usability for all users (e.g., high contrast, multitasking).  

---

**Break**  

--- 